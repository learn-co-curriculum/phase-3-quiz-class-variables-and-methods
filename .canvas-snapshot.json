{
  "quiz": {
    "id": 19080,
    "title": "Class Variables and Methods Quiz",
    "html_url": "https://learning.flatironschool.com/courses/3299/quizzes/19080",
    "mobile_url": "https://learning.flatironschool.com/courses/3299/quizzes/19080?force_user=1&persist_headless=1",
    "description": "<div id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-3-quiz-class-variables-and-methods\"></div>\n<header class=\"fis-header\"><a class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-3-quiz-class-variables-and-methods/issues/new\" target=\"_blank\"><img id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"></a></header>\n<p>It's time to check your knowledge! Use this quiz to create a custom study guide. Note any answers that were marked incorrect, so you can study the relevant material and try this quiz again.</p>\n<p>If you don't know the answer to a question, please do not guess. Instead, select \"I don't know\". It's OK not to know everything and to admit when we're unsure.</p>",
    "quiz_type": "assignment",
    "time_limit": null,
    "timer_autosubmit_disabled": false,
    "shuffle_answers": true,
    "show_correct_answers": true,
    "scoring_policy": "keep_highest",
    "allowed_attempts": 3,
    "one_question_at_a_time": true,
    "question_count": 10,
    "points_possible": 10.0,
    "cant_go_back": false,
    "access_code": null,
    "ip_filter": null,
    "due_at": null,
    "lock_at": null,
    "unlock_at": null,
    "published": false,
    "unpublishable": true,
    "locked_for_user": true,
    "lock_info": {
      "missing_permission": "participate_as_student",
      "asset_string": "quizzes:quiz_19080"
    },
    "lock_explanation": "This quiz is currently locked.",
    "hide_results": null,
    "show_correct_answers_at": null,
    "hide_correct_answers_at": null,
    "all_dates": [
      {
        "due_at": null,
        "unlock_at": null,
        "lock_at": null,
        "base": true
      }
    ],
    "can_unpublish": true,
    "can_update": true,
    "require_lockdown_browser": false,
    "require_lockdown_browser_for_results": false,
    "require_lockdown_browser_monitor": false,
    "lockdown_browser_monitor_data": "",
    "speed_grader_url": null,
    "permissions": {
      "manage": true,
      "read": true,
      "create": true,
      "update": true,
      "submit": true,
      "preview": true,
      "delete": true,
      "read_statistics": true,
      "grade": true,
      "review_grades": true,
      "view_answer_audits": true
    },
    "quiz_reports_url": "https://learning.flatironschool.com/api/v1/courses/3299/quizzes/19080/reports",
    "quiz_statistics_url": "https://learning.flatironschool.com/api/v1/courses/3299/quizzes/19080/statistics",
    "message_students_url": "https://learning.flatironschool.com/api/v1/courses/3299/quizzes/19080/submission_users/message",
    "section_count": 1,
    "important_dates": false,
    "quiz_submission_versions_html_url": "https://learning.flatironschool.com/courses/3299/quizzes/19080/submission_versions",
    "assignment_id": 129338,
    "one_time_results": false,
    "only_visible_to_overrides": false,
    "assignment_group_id": 9648,
    "show_correct_answers_last_attempt": true,
    "version_number": 5,
    "has_access_code": false,
    "post_to_sis": false,
    "migration_id": "g4265bfbd8875f14706c13b0e44f690e3",
    "in_paced_course": false,
    "question_types": [
      "multiple_choice_question",
      "multiple_answers_question"
    ]
  },
  "questions": [
    {
      "id": 120464,
      "quiz_id": 19080,
      "quiz_group_id": null,
      "assessment_question_id": 135541,
      "position": null,
      "question_name": "OO Syntax",
      "question_type": "multiple_choice_question",
      "question_text": "<p>Classes themselves are objects.</p>",
      "points_possible": 1.0,
      "correct_comments": "",
      "incorrect_comments": "",
      "neutral_comments": "",
      "correct_comments_html": "",
      "incorrect_comments_html": "",
      "neutral_comments_html": "<p><strong>Source/s:</strong></p><ul><li><a href=\"https://learning.flatironschool.com/courses/3299/pages/class-variables-and-class-methods\">Class Variables and Class Methods</a></li></ul><p></p>",
      "answers": [
        {
          "id": 8880,
          "text": "",
          "html": "<p>True</p>",
          "comments": "",
          "comments_html": "<p>Yes! If our definition of an object is a bundle of code that contains data and\nbehaviors, then an entire class itself qualifies as an object. Our custom Ruby\nclasses are actually instances of the\n<a href=\"https://ruby-doc.org/core-2.5.3/Class.html\"><code>Class</code> class</a>.</p>",
          "weight": 100.0
        },
        {
          "id": 9095,
          "text": "",
          "html": "<p>False</p>",
          "comments": "",
          "comments_html": "<p>You might want to review the source/s for this question.</p>",
          "weight": 0.0
        },
        {
          "id": 2413,
          "text": "",
          "html": "<p>I don't know.</p>",
          "comments": "",
          "comments_html": "<p>Be sure to study the source/s for this question. You'll get it next time.</p>",
          "weight": 0.0
        }
      ],
      "variables": null,
      "formulas": null,
      "answer_tolerance": null,
      "formula_decimal_places": null,
      "matches": null,
      "matching_answer_incorrect_matches": null
    },
    {
      "id": 120465,
      "quiz_id": 19080,
      "quiz_group_id": null,
      "assessment_question_id": 135542,
      "position": null,
      "question_name": "OO Syntax",
      "question_type": "multiple_choice_question",
      "question_text": "<p>What type of scope does a <strong>class variable</strong> have?</p>",
      "points_possible": 1.0,
      "correct_comments": "",
      "incorrect_comments": "",
      "neutral_comments": "",
      "correct_comments_html": "",
      "incorrect_comments_html": "",
      "neutral_comments_html": "<p><strong>Source/s:</strong></p><ul><li><a href=\"https://learning.flatironschool.com/courses/3299/pages/class-variables-and-class-methods\">Class Variables and Class Methods</a></li></ul><p></p>",
      "answers": [
        {
          "id": 8537,
          "text": "",
          "html": "<p>Class</p>",
          "comments": "",
          "comments_html": "<p>Exactly! A class variable is accessible to the whole class and is unique to the\nclass itself.</p>",
          "weight": 100.0
        },
        {
          "id": 1446,
          "text": "",
          "html": "<p>Local</p>",
          "comments": "",
          "comments_html": "<p>Local scope is used to describe variables declared in a specific scope, such as\nin methods. They are only available within that scope.</p>",
          "weight": 0.0
        },
        {
          "id": 8162,
          "text": "",
          "html": "<p>Global</p>",
          "comments": "",
          "comments_html": "<p>Global variables are declared with <code>$</code> and are available everywhere.</p>",
          "weight": 0.0
        },
        {
          "id": 6168,
          "text": "",
          "html": "<p>Instance</p>",
          "comments": "",
          "comments_html": "<p>Instance variables belong to specific instances/objects of a class and are\ndeclared with <code>@</code>.</p>",
          "weight": 0.0
        },
        {
          "id": 4032,
          "text": "",
          "html": "<p>I don't know.</p>",
          "comments": "",
          "comments_html": "<p>Be sure to study the source/s for this question. You'll get it next time.</p>",
          "weight": 0.0
        }
      ],
      "variables": null,
      "formulas": null,
      "answer_tolerance": null,
      "formula_decimal_places": null,
      "matches": null,
      "matching_answer_incorrect_matches": null
    },
    {
      "id": 120466,
      "quiz_id": 19080,
      "quiz_group_id": null,
      "assessment_question_id": 135543,
      "position": null,
      "question_name": "OO Syntax",
      "question_type": "multiple_choice_question",
      "question_text": "<p>What is the correct syntax for a class variable?</p>",
      "points_possible": 1.0,
      "correct_comments": "",
      "incorrect_comments": "",
      "neutral_comments": "",
      "correct_comments_html": "",
      "incorrect_comments_html": "",
      "neutral_comments_html": "<p><strong>Source/s:</strong></p><ul><li><a href=\"https://learning.flatironschool.com/courses/3299/pages/class-variables-and-class-methods\">Class Variables and Class Methods</a></li></ul><p></p>",
      "answers": [
        {
          "id": 8077,
          "text": "",
          "html": "<div class=\"highlight\"><pre class=\"highlight ruby\"><code><span class=\"vc\">@@variable_name</span>\n</code></pre></div>",
          "comments": "",
          "comments_html": "<p>Correct! We use <code>@@</code> to declare class variables.</p>",
          "weight": 100.0
        },
        {
          "id": 5351,
          "text": "",
          "html": "<div class=\"highlight\"><pre class=\"highlight ruby\"><code><span class=\"vi\">@variable_name</span>\n</code></pre></div>",
          "comments": "",
          "comments_html": "<p>This is how we declare instance variables.</p>",
          "weight": 0.0
        },
        {
          "id": 3161,
          "text": "",
          "html": "<div class=\"highlight\"><pre class=\"highlight ruby\"><code><span class=\"vg\">$variable_name</span>\n</code></pre></div>",
          "comments": "",
          "comments_html": "<p>This is how we declare global variables.</p>",
          "weight": 0.0
        },
        {
          "id": 8166,
          "text": "",
          "html": "<div class=\"highlight\"><pre class=\"highlight ruby\"><code><span class=\"no\">VARIABLE_NAME</span>\n</code></pre></div>",
          "comments": "",
          "comments_html": "<p>This is how we declare a constant.</p>",
          "weight": 0.0
        },
        {
          "id": 4440,
          "text": "",
          "html": "<p>I don't know</p>",
          "comments": "",
          "comments_html": "<p>Be sure to study the source/s for this question. You'll get it next time.</p>",
          "weight": 0.0
        }
      ],
      "variables": null,
      "formulas": null,
      "answer_tolerance": null,
      "formula_decimal_places": null,
      "matches": null,
      "matching_answer_incorrect_matches": null
    },
    {
      "id": 120467,
      "quiz_id": 19080,
      "quiz_group_id": null,
      "assessment_question_id": 135544,
      "position": null,
      "question_name": "OO Syntax",
      "question_type": "multiple_choice_question",
      "question_text": "<p>Consider the following code:</p>\n<div class=\"highlight\"><pre class=\"highlight ruby\"><code><span class=\"k\">class</span> <span class=\"nc\">MyClass</span>\n  <span class=\"k\">def</span> <span class=\"nc\">self</span><span class=\"o\">.</span><span class=\"nf\">class_method_name</span>\n    <span class=\"c1\"># some code</span>\n  <span class=\"k\">end</span>\n<span class=\"k\">end</span>\n</code></pre></div>\n<p>In this code sample, what does the keyword <code>self</code> refer to?</p>",
      "points_possible": 1.0,
      "correct_comments": "",
      "incorrect_comments": "",
      "neutral_comments": "",
      "correct_comments_html": "",
      "incorrect_comments_html": "",
      "neutral_comments_html": "<p><strong>Source/s:</strong></p><ul><li><a href=\"/courses/3299/pages/class-variables-and-class-methods\">Class Variables and Class Methods</a></li></ul><p></p>",
      "answers": [
        {
          "id": 4753,
          "text": "",
          "html": "<p>The entire <code>MyClass</code> class itself.</p>",
          "comments": "",
          "comments_html": "<p>Perfect! <code>self</code> is being used inside the class itself, so it refers to the\nclass.</p>",
          "weight": 100.0
        },
        {
          "id": 3345,
          "text": "",
          "html": "<p>An instance of the class.</p>",
          "comments": "",
          "comments_html": "<p>Where is <code>self</code> being used? Is it inside an instance method or inside the class?</p>",
          "weight": 0.0
        },
        {
          "id": 6219,
          "text": "",
          "html": "<p>Global scope.</p>",
          "comments": "",
          "comments_html": "<p>Where is <code>self</code> being used? Is it inside the class or just floating around in\nthe file not nested in any other code?</p>",
          "weight": 0.0
        },
        {
          "id": 9165,
          "text": "",
          "html": "<p>I don't know.</p>",
          "comments": "",
          "comments_html": "<p>Be sure to study the source/s for this question. You'll get it next time.</p>",
          "weight": 0.0
        }
      ],
      "variables": null,
      "formulas": null,
      "answer_tolerance": null,
      "formula_decimal_places": null,
      "matches": null,
      "matching_answer_incorrect_matches": null
    },
    {
      "id": 120468,
      "quiz_id": 19080,
      "quiz_group_id": null,
      "assessment_question_id": 135545,
      "position": null,
      "question_name": "OO Syntax",
      "question_type": "multiple_choice_question",
      "question_text": "<p>Private methods can only be called within the context of the defining class. The\nreceiver of a private method is always <code>self</code>.</p>",
      "points_possible": 1.0,
      "correct_comments": "",
      "incorrect_comments": "",
      "neutral_comments": "",
      "correct_comments_html": "",
      "incorrect_comments_html": "",
      "neutral_comments_html": "<p><strong>Source/s:</strong></p><ul><li><a href=\"https://learning.flatironschool.com/courses/3299/pages/private-methods\">Private Methods</a></li></ul><p></p>",
      "answers": [
        {
          "id": 2914,
          "text": "",
          "html": "<p>True</p>",
          "comments": "",
          "comments_html": "<p>Fantastic! We can't call private methods on objects outside of a class, but we\ncan call them on <code>self</code> within a class.</p>",
          "weight": 100.0
        },
        {
          "id": 5828,
          "text": "",
          "html": "<p>False</p>",
          "comments": "",
          "comments_html": "<p>Try opening up a Ruby REPL and defining a class with a private method. Try\ncalling that private method inside of the class on <code>self</code>, and then outside of\nthe class on an object instantiated from that class. What happens?</p>",
          "weight": 0.0
        },
        {
          "id": 6743,
          "text": "",
          "html": "<p>I don't know.</p>",
          "comments": "",
          "comments_html": "<p>Be sure to study the source/s for this question. You'll get it next time.</p>",
          "weight": 0.0
        }
      ],
      "variables": null,
      "formulas": null,
      "answer_tolerance": null,
      "formula_decimal_places": null,
      "matches": null,
      "matching_answer_incorrect_matches": null
    },
    {
      "id": 120469,
      "quiz_id": 19080,
      "quiz_group_id": null,
      "assessment_question_id": 135546,
      "position": null,
      "question_name": "OO Syntax",
      "question_type": "multiple_choice_question",
      "question_text": "<p>To declare private methods, we usually type <code>private</code> and then declare all of\nour private methods below that.</p>",
      "points_possible": 1.0,
      "correct_comments": "",
      "incorrect_comments": "",
      "neutral_comments": "",
      "correct_comments_html": "",
      "incorrect_comments_html": "",
      "neutral_comments_html": "<p><strong>Source/s:</strong></p><ul><li><a href=\"https://learning.flatironschool.com/courses/3299/pages/private-methods\">Private Methods</a></li></ul><p></p>",
      "answers": [
        {
          "id": 2080,
          "text": "",
          "html": "<p>True</p>",
          "comments": "",
          "comments_html": "<p>Correct! We only need to type <code>private</code> once, and then declare the private\nmethods below that. The only exception to this rule is that we don't declare\n<code>initialize</code> under <code>private</code>.</p>",
          "weight": 100.0
        },
        {
          "id": 7481,
          "text": "",
          "html": "<p>False</p>",
          "comments": "",
          "comments_html": "<p>We need to tell Ruby that these methods are private, so the <code>private</code> method is\nrequired. We only need to call it once.</p>",
          "weight": 0.0
        },
        {
          "id": 7934,
          "text": "",
          "html": "<p>I don't know.</p>",
          "comments": "",
          "comments_html": "<p>Be sure to study the source/s for this question. You'll get it next time.</p>",
          "weight": 0.0
        }
      ],
      "variables": null,
      "formulas": null,
      "answer_tolerance": null,
      "formula_decimal_places": null,
      "matches": null,
      "matching_answer_incorrect_matches": null
    },
    {
      "id": 120470,
      "quiz_id": 19080,
      "quiz_group_id": null,
      "assessment_question_id": 135547,
      "position": null,
      "question_name": "OO Concepts",
      "question_type": "multiple_answers_question",
      "question_text": "<p>Why do we declare private methods? Select all that apply.</p>",
      "points_possible": 1.0,
      "correct_comments": "",
      "incorrect_comments": "",
      "neutral_comments": "",
      "correct_comments_html": "",
      "incorrect_comments_html": "",
      "neutral_comments_html": "<p><strong>Source/s:</strong></p><ul><li><a href=\"https://learning.flatironschool.com/courses/3299/pages/private-methods\">Private Methods</a></li></ul><p></p>",
      "answers": [
        {
          "id": 122,
          "text": "",
          "comments": "",
          "comments_html": "<p>Yes! We often declare helper methods that don't need to be accessed outside of\nthe class as private methods.</p>",
          "weight": 100.0,
          "html": "<p>They signal to other developers that these are dependencies for other methods in\nthe class.</p>"
        },
        {
          "id": 4280,
          "text": "",
          "comments": "",
          "comments_html": "<p>So true! Any functionality that doesn't need to be accessed outside of a class\ncan be safely tucked away in a private method. Exposing only those methods\ndevelopers need to work with can protect the data in your class and make your\ncode easier to work with.</p>",
          "weight": 100.0,
          "html": "<p>They encapsulate functionality that doesn't need to be exposed or accessed\noutside of the class.</p>"
        },
        {
          "id": 2442,
          "text": "",
          "comments": "",
          "comments_html": "<p>Private methods are often helper methods that other public methods rely on.\nDeleting them could be quite disastrous.</p>",
          "weight": 0.0,
          "html": "<p>They signal to other developers that these methods are okay to remove in the\nfuture, because they're not really needed.</p>"
        },
        {
          "id": 3813,
          "text": "",
          "comments": "",
          "comments_html": "<p>Be sure to study the source/s for this question. You'll get it next time.</p>",
          "weight": 0.0,
          "html": "<p>I don't know.</p>"
        }
      ],
      "variables": null,
      "formulas": null,
      "answer_tolerance": null,
      "formula_decimal_places": null,
      "matches": null,
      "matching_answer_incorrect_matches": null
    },
    {
      "id": 120472,
      "quiz_id": 19080,
      "quiz_group_id": null,
      "assessment_question_id": 135549,
      "position": null,
      "question_name": "OO Syntax",
      "question_type": "multiple_choice_question",
      "question_text": "<p>What type of constant is defined within a class and is available to all\ninstances of a particular class?</p>",
      "points_possible": 1.0,
      "correct_comments": "",
      "incorrect_comments": "",
      "neutral_comments": "",
      "correct_comments_html": "",
      "incorrect_comments_html": "",
      "neutral_comments_html": "<p><strong>Source/s:</strong></p><ul><li><a href=\"https://learning.flatironschool.com/courses/3299/assignments/74045\">Class Constants</a></li></ul><p></p>",
      "answers": [
        {
          "id": 7719,
          "text": "",
          "html": "<p>Class</p>",
          "comments": "",
          "comments_html": "<p>Amazing! Class constants have the same value no matter which instance is\naccessing it. It is a shared constant and is also accessible inside of class\nmethods.</p>",
          "weight": 100.0
        },
        {
          "id": 6252,
          "text": "",
          "html": "<p>Global</p>",
          "comments": "",
          "comments_html": "<p>A global constant would be available to all class instances, not just a single\nclass. It would also be available to methods outside of classes, and, well,\neverywhere.</p>",
          "weight": 0.0
        },
        {
          "id": 615,
          "text": "",
          "html": "<p>Instance</p>",
          "comments": "",
          "comments_html": "<p>We don't usually declare constants inside of instance methods. What kind of\nconstant might we need if we want all of the instances of a class to have\naccess to the same value?</p>",
          "weight": 0.0
        },
        {
          "id": 3403,
          "text": "",
          "html": "<p>I don't know</p>",
          "comments": "",
          "comments_html": "<p>Be sure to study the source/s for this question. You'll get it next time.</p>",
          "weight": 0.0
        }
      ],
      "variables": null,
      "formulas": null,
      "answer_tolerance": null,
      "formula_decimal_places": null,
      "matches": null,
      "matching_answer_incorrect_matches": null
    },
    {
      "id": 120473,
      "quiz_id": 19080,
      "quiz_group_id": null,
      "assessment_question_id": 135550,
      "position": null,
      "question_name": "OO Syntax",
      "question_type": "multiple_choice_question",
      "question_text": "<p>To create a constant, what syntax should be used?</p>",
      "points_possible": 1.0,
      "correct_comments": "",
      "incorrect_comments": "",
      "neutral_comments": "",
      "correct_comments_html": "",
      "incorrect_comments_html": "",
      "neutral_comments_html": "<p><strong>Source/s:</strong></p><ul><li><a href=\"https://learning.flatironschool.com/courses/3299/assignments/74045\">Class Constants</a></li></ul><p></p>",
      "answers": [
        {
          "id": 7700,
          "text": "",
          "html": "<div class=\"highlight\"><pre class=\"highlight ruby\"><code><span class=\"no\">VARIABLE_NAME</span>\n</code></pre></div>",
          "comments": "",
          "comments_html": "<p>Exactly! All caps and snake case is the way to go. We'd also declare it outside\nof any methods.</p>",
          "weight": 100.0
        },
        {
          "id": 4872,
          "text": "",
          "html": "<div class=\"highlight\"><pre class=\"highlight ruby\"><code><span class=\"vi\">@variable_name</span>\n</code></pre></div>",
          "comments": "",
          "comments_html": "<p>This is how we declare instance variables. You might want to review the source/s\nfor this question.</p>",
          "weight": 0.0
        },
        {
          "id": 1187,
          "text": "",
          "html": "<div class=\"highlight\"><pre class=\"highlight ruby\"><code><span class=\"vc\">@@variable_name</span>\n</code></pre></div>",
          "comments": "",
          "comments_html": "<p>This is how we declare class variables. You might want to review the source/s\nfor this question.</p>",
          "weight": 0.0
        },
        {
          "id": 5247,
          "text": "",
          "html": "<p>I don't know</p>",
          "comments": "",
          "comments_html": "<p>Be sure to study the source/s for this question. You'll get it next time.</p>",
          "weight": 0.0
        }
      ],
      "variables": null,
      "formulas": null,
      "answer_tolerance": null,
      "formula_decimal_places": null,
      "matches": null,
      "matching_answer_incorrect_matches": null
    },
    {
      "id": 120474,
      "quiz_id": 19080,
      "quiz_group_id": null,
      "assessment_question_id": 135551,
      "position": null,
      "question_name": "OO Syntax",
      "question_type": "multiple_choice_question",
      "question_text": "<p>Consider the following code:</p>\n<div class=\"highlight\"><pre class=\"highlight ruby\"><code><span class=\"k\">class</span> <span class=\"nc\">Book</span>\n  <span class=\"nb\">attr_accessor</span> <span class=\"ss\">:author</span><span class=\"p\">,</span> <span class=\"ss\">:page_count</span><span class=\"p\">,</span> <span class=\"ss\">:genre</span>\n  <span class=\"nb\">attr_reader</span> <span class=\"ss\">:title</span>\n\n  <span class=\"no\">GENRES</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n\n  <span class=\"k\">def</span> <span class=\"nf\">initialize</span><span class=\"p\">(</span><span class=\"n\">title</span><span class=\"p\">)</span>\n    <span class=\"vi\">@title</span> <span class=\"o\">=</span> <span class=\"n\">title</span>\n  <span class=\"k\">end</span>\n\n  <span class=\"k\">def</span> <span class=\"nc\">self</span><span class=\"o\">.</span><span class=\"nf\">genres</span>\n    <span class=\"no\">GENRES</span>\n  <span class=\"k\">end</span>\n<span class=\"k\">end</span>\n</code></pre></div>\n<p>Every time a genre is added to a <code>Book</code> object, we want to store that genre in\nthe class constant <code>GENRES</code>. The code above doesn't currently do this. Select\nthe code snippet that does.</p>",
      "points_possible": 1.0,
      "correct_comments": "",
      "incorrect_comments": "",
      "neutral_comments": "",
      "correct_comments_html": "",
      "incorrect_comments_html": "",
      "neutral_comments_html": "<p><strong>Source/s:</strong></p><ul><li><a href=\"https://learning.flatironschool.com/courses/3299/assignments/74045\">Class Constants</a></li></ul><p></p>",
      "answers": [
        {
          "id": 9079,
          "text": "",
          "html": "<div class=\"highlight\"><pre class=\"highlight ruby\"><code><span class=\"k\">class</span> <span class=\"nc\">Book</span>\n  <span class=\"nb\">attr_accessor</span> <span class=\"ss\">:author</span><span class=\"p\">,</span> <span class=\"ss\">:page_count</span>\n  <span class=\"nb\">attr_reader</span> <span class=\"ss\">:title</span>\n\n  <span class=\"no\">GENRES</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n\n  <span class=\"k\">def</span> <span class=\"nf\">initialize</span><span class=\"p\">(</span><span class=\"n\">title</span><span class=\"p\">)</span>\n    <span class=\"vi\">@title</span> <span class=\"o\">=</span> <span class=\"n\">title</span>\n  <span class=\"k\">end</span>\n\n  <span class=\"k\">def</span> <span class=\"nf\">genre</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"n\">genre</span><span class=\"p\">)</span>\n    <span class=\"no\">GENRES</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">genre</span>\n    <span class=\"vi\">@genre</span> <span class=\"o\">=</span> <span class=\"n\">genre</span>\n  <span class=\"k\">end</span>\n\n  <span class=\"k\">def</span> <span class=\"nc\">self</span><span class=\"o\">.</span><span class=\"nf\">genres</span>\n    <span class=\"no\">GENRES</span>\n  <span class=\"k\">end</span>\n<span class=\"k\">end</span>\n</code></pre></div>",
          "comments": "",
          "comments_html": "<p>Wow! Nailed it!! By creating a setter and adding the genre to <code>GENRES</code> in the\nsetter, we achieve exactly what we want.</p>",
          "weight": 100.0
        },
        {
          "id": 3035,
          "text": "",
          "html": "<div class=\"highlight\"><pre class=\"highlight ruby\"><code><span class=\"k\">class</span> <span class=\"nc\">Book</span>\n  <span class=\"nb\">attr_accessor</span> <span class=\"ss\">:author</span><span class=\"p\">,</span> <span class=\"ss\">:page_count</span><span class=\"p\">,</span> <span class=\"ss\">:genre</span>\n  <span class=\"nb\">attr_reader</span> <span class=\"ss\">:title</span>\n\n  <span class=\"no\">GENRES</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n\n  <span class=\"k\">def</span> <span class=\"nf\">initialize</span><span class=\"p\">(</span><span class=\"n\">title</span><span class=\"p\">)</span>\n    <span class=\"vi\">@title</span> <span class=\"o\">=</span> <span class=\"n\">title</span>\n    <span class=\"no\">GENRES</span> <span class=\"o\">&lt;&lt;</span> <span class=\"nb\">self</span>\n  <span class=\"k\">end</span>\n\n  <span class=\"k\">def</span> <span class=\"nc\">self</span><span class=\"o\">.</span><span class=\"nf\">genres</span>\n    <span class=\"no\">GENRES</span>\n  <span class=\"k\">end</span>\n<span class=\"k\">end</span>\n</code></pre></div>",
          "comments": "",
          "comments_html": "<p>This isn't actually adding the genre to <code>GENRES</code>. What is the code actually\nadding, and what should it be doing instead?</p>",
          "weight": 0.0
        },
        {
          "id": 4373,
          "text": "",
          "html": "<div class=\"highlight\"><pre class=\"highlight ruby\"><code><span class=\"k\">class</span> <span class=\"nc\">Book</span>\n  <span class=\"nb\">attr_accessor</span> <span class=\"ss\">:author</span><span class=\"p\">,</span> <span class=\"ss\">:page_count</span>\n  <span class=\"nb\">attr_reader</span> <span class=\"ss\">:title</span>\n  <span class=\"nb\">attr_writer</span> <span class=\"ss\">:genre</span>\n\n  <span class=\"no\">GENRES</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n\n  <span class=\"k\">def</span> <span class=\"nf\">initialize</span><span class=\"p\">(</span><span class=\"n\">title</span><span class=\"p\">)</span>\n    <span class=\"vi\">@title</span> <span class=\"o\">=</span> <span class=\"n\">title</span>\n  <span class=\"k\">end</span>\n\n  <span class=\"k\">def</span> <span class=\"nf\">genre</span>\n    <span class=\"no\">GENRES</span> <span class=\"o\">&lt;&lt;</span> <span class=\"vi\">@genre</span>\n  <span class=\"k\">end</span>\n\n  <span class=\"k\">def</span> <span class=\"nc\">self</span><span class=\"o\">.</span><span class=\"nf\">genres</span>\n    <span class=\"no\">GENRES</span>\n  <span class=\"k\">end</span>\n<span class=\"k\">end</span>\n</code></pre></div>",
          "comments": "",
          "comments_html": "<p>This is a bit of a weird one, and not quite right. When is the genre being\nadded to <code>GENRES</code>? What will happen every time you try to read the <code>genre</code>\nproperty on an object? If you're not sure, try running the code, adding a\ngenre, and then reading the genre a few times before running <code>Book.genres</code>.</p>",
          "weight": 0.0
        },
        {
          "id": 5003,
          "text": "",
          "html": "<p>I don't know.</p>",
          "comments": "",
          "comments_html": "<p>Be sure to study the source/s for this question. You'll get it next time.</p>",
          "weight": 0.0
        }
      ],
      "variables": null,
      "formulas": null,
      "answer_tolerance": null,
      "formula_decimal_places": null,
      "matches": null,
      "matching_answer_incorrect_matches": null
    }
  ]
}